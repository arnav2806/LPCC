Problem (32) - Problem (35)
nano expr.l
%{
#include "y.tab.h"
%}

%%
[0-9]+\.[0-9]+     { yylval.dval = atof(yytext); return NUM; }
[0-9]+             { yylval.dval = atoi(yytext); return NUM; }
"("                { return '('; }
")"                { return ')'; }
"+"                { return '+'; }
"-"                { return '-'; }
"*"                { return '*'; }
"/"                { return '/'; }
[ \t\n]+           { /* skip whitespace */ }
.                  { return yytext[0]; }
%%

int yywrap() {
    return 1;
}

nano expr.y
%{
#include <stdio.h>
#include <stdlib.h>
int yylex(void);
int yyerror(const char *s);
%}

%union {
    double dval;
}

%token <dval> NUM
%type <dval> expr

%left '+' '-'
%left '*' '/'

%%
expr: expr '+' expr   { $$ = $1 + $3; printf("= %f\n", $$); }
    | expr '-' expr   { $$ = $1 - $3; printf("= %f\n", $$); }
    | expr '*' expr   { $$ = $1 * $3; printf("= %f\n", $$); }
    | expr '/' expr   {
        if ($3 == 0) { printf("Divide by zero!\n"); exit(1); }
        $$ = $1 / $3; printf("= %f\n", $$);
      }
    | '(' expr ')'    { $$ = $2; }
    | NUM             { $$ = $1; }
    ;
%%

int main() {
    printf("Enter expression:\n");
    yyparse();
    return 0;
}

int yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
    return 0;
}
yacc -d expr.y
flex expr.l
gcc y.tab.c lex.yy.c -o expr -lm
./expr
0.33 * 12 - 4 - 4 + (3 * 2)
