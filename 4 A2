import java.util.ArrayList;
import java.util.List;

class Literal {
    String value;
    int address;

    public Literal(String value, int address) {
        this.value = value;
        this.address = address;
    }

    @Override
    public String toString() {
        return value + "\t" + address;
    }
}

public class LiteralTableGeneratorA2 {
    public static void main(String[] args) {
        String[] assemblyCode = {
            "START 100",
            "READ A",
            "READ B",
            "MOVER AREG, ='50'",
            "MOVER BREG, ='60'",
            "ADD AREG, BREG",
            "LOOP MOVER CREG, A",
            "ADD CREG, ='10'",
            "COMP CREG, B",
            "BC LT, LOOP",
            "NEXT SUB AREG, ='10'",
            "COMP AREG, B",
            "BC GT, NEXT",
            "STOP",
            "A DS 1",
            "B DS 1",
            "END"
        };

        List<Literal> literalTable = new ArrayList<>();
        int locationCounter = 100;
        int literalAddress = 200; // Starting address for literals

        for (String line : assemblyCode) {
            line = line.trim();
            if (line.isEmpty()) continue;

            String[] tokens = line.split("\\s+");
            
            if (tokens[0].equals("START")) {
                locationCounter = Integer.parseInt(tokens[1]);
                continue;
            }
            
            // Check for literals in the line
            for (String token : tokens) {
                if (token.startsWith("='") && token.endsWith("'")) {
                    boolean found = false;
                    for (Literal lit : literalTable) {
                        if (lit.value.equals(token)) {
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        literalTable.add(new Literal(token, literalAddress++));
                    }
                }
            }
            
            if (tokens[0].equals("END")) break;
        }

        System.out.println("Literal Table:");
        System.out.println("Literal\tAddress");
        for (Literal lit : literalTable) {
            System.out.println(lit);
        }
    }
}
